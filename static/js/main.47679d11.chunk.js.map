{"version":3,"sources":["components/AddToDo.js","actions/index.js","components/ToDoList.js","components/Filter.js","components/App.js","reducers/todo.js","reducers/index.js","reducers/visibilityFilter.js","serviceWorker.js","index.js"],"names":["AddToDo","props","submitForm","e","preventDefault","state","value","error","addToDo","setState","onSubmit","className","type","placeholder","this","onChange","target","React","Component","connect","taskName","payload","id","Math","random","completed","todo","localStorage","getItem","JSON","parse","setItem","stringify","ToDoList","getList","todoList","visibilityFilter","filter","item","length","map","listItem","index","key","onClick","toggleToDo","fetchToDos","console","log","_","forEach","o","set","dispatch","Filter","setVisibilityFilter","visibilityFlag","App","initialState","combineReducers","action","newState","Boolean","window","location","hostname","match","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47679d11.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//import action\r\nimport { addToDo } from \"../actions\";\r\n\r\nclass AddToDo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      error: \"\"\r\n    };\r\n  }\r\n\r\n  submitForm = (e) => {\r\n    e.preventDefault();\r\n    const { value, error } = this.state;\r\n\r\n    if (value !== \"\") {\r\n      //run action function\r\n      this.props.addToDo(value);\r\n\r\n      //now make the value empty\r\n      this.setState({\r\n        value: \"\",\r\n        error: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        error: \"Please type something!\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={(e) => this.submitForm(e)}>\r\n        <div className=\"ui fluid action input\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add Todo\"\r\n            value={this.state.value}\r\n            onChange={(e) =>\r\n              this.setState({\r\n                value: e.target.value\r\n              })\r\n            }\r\n          />\r\n          <button className=\"ui button\" type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n        {this.state.error !== \"\" ? <div>{this.state.error}</div> : null}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { addToDo }\r\n)(AddToDo);\r\n","import _ from \"lodash\";\r\n//fetch to do\r\nexport const fetchToDos = () => (dispatch) => {\r\n  let todo = localStorage.getItem(\"todo\");\r\n\r\n  todo = todo ? JSON.parse(todo) : [];\r\n\r\n  dispatch({\r\n    type: \"FETCH_TODOS\",\r\n    payload: todo\r\n  });\r\n};\r\n\r\n//ADD TO DO ACTION\r\nexport const addToDo = (taskName) => {\r\n  let payload = { taskName, id: Math.random(), completed: false };\r\n\r\n  let todo = localStorage.getItem(\"todo\");\r\n\r\n  todo = todo ? JSON.parse(todo) : [];\r\n\r\n  todo = [...todo, payload];\r\n  localStorage.setItem(\"todo\", JSON.stringify(todo));\r\n  return {\r\n    type: \"ADD_TODO\",\r\n    payload: taskName\r\n  };\r\n};\r\n\r\n//toggle todo\r\nexport const toggleToDo = (id) => {\r\n  let todo = localStorage.getItem(\"todo\");\r\n\r\n  todo = todo ? JSON.parse(todo) : [];\r\n\r\n  //now let newState = _.forEach(state, function(o) {\r\n  todo = _.forEach(todo, function(o) {\r\n    if (o.id === id) return _.set(o, \"completed\", !o.completed);\r\n  });\r\n\r\n  localStorage.setItem(\"todo\", JSON.stringify(todo));\r\n\r\n  return {\r\n    type: \"TOGGLE_TODO\",\r\n    payload: id\r\n  };\r\n};\r\n\r\n//visibility filter\r\nexport const setVisibilityFilter = (visibilityFlag) => {\r\n  return {\r\n    type: \"SET_VISIBILITY_FILTER\",\r\n    payload: visibilityFlag\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { toggleToDo, fetchToDos } from \"../actions\";\r\n\r\nclass ToDoList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.props.fetchToDos();\r\n  }\r\n\r\n  getList = () => {\r\n    const { todo, visibilityFilter } = this.props;\r\n\r\n    let todoList;\r\n    //Now based on the filter we need to make the todolist\r\n    switch (visibilityFilter) {\r\n      case \"ALL\":\r\n        todoList = todo;\r\n        break;\r\n\r\n      case true:\r\n        todoList = todo.filter((item) => item.completed === true);\r\n        break;\r\n\r\n      case false:\r\n        todoList = todo.filter((item) => item.completed === false);\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <ul>\r\n        {todoList.length\r\n          ? todoList.map((listItem, index) => (\r\n              <li\r\n                className={`cursor-pointer ui  ${\r\n                  listItem.completed ? \"strike\" : null\r\n                }`}\r\n                key={listItem.id}\r\n                onClick={(e) => this.props.toggleToDo(listItem.id)}\r\n              >\r\n                {listItem.taskName}\r\n              </li>\r\n            ))\r\n          : \"No Tasks present\"}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return this.getList();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { todo, visibilityFilter } = state;\r\n  console.log(\"todo\", todo);\r\n  return { todo, visibilityFilter };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { toggleToDo, fetchToDos }\r\n)(ToDoList);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {setVisibilityFilter} from \"../actions\";\r\n\r\nclass Filter extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            visibilityFilter: \"ALL\"\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        const { visibilityFilter} = this.props;\r\n        return (\r\n            <div>\r\n                <label>\r\n                Filter :\r\n                </label>\r\n                <div className=\"filtersBar\">\r\n                <p className={visibilityFilter === \"ALL\" ? 'active': null} onClick={() => this.props.setVisibilityFilter(\"ALL\")} >\r\n                    All\r\n                </p>\r\n                <p className={visibilityFilter === true ? 'active': null} onClick={() => this.props.setVisibilityFilter(true)}>\r\n                    Completed\r\n                </p>\r\n                <p className={visibilityFilter === false ? 'active': null} onClick={() => this.props.setVisibilityFilter(false)}>\r\n                    InCompleted\r\n                </p>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({visibilityFilter}) => {\r\n    return {visibilityFilter};\r\n}\r\n\r\nexport default connect(mapStateToProps, {setVisibilityFilter})(Filter);","import './styles/index.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport React from \"react\";\r\n\r\nimport AddToDo from \"./AddToDo\";\r\nimport ToDoList from \"./ToDoList\";\r\nimport Filter from \"./Filter\";\r\n\r\nclass App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <AddToDo />\r\n                <ToDoList />\r\n                <Filter />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import _ from \"lodash\";\r\n\r\nconst initialState = [];\r\n\r\n//function\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"FETCH_TODOS\":\r\n      return action.payload;\r\n\r\n    case \"ADD_TODO\":\r\n      return [\r\n        ...state,\r\n        {\r\n          taskName: action.payload,\r\n          id: Math.random(),\r\n          completed: false\r\n        }\r\n      ];\r\n\r\n    case \"TOGGLE_TODO\":\r\n      //GET\r\n      let newState = _.forEach(state, function(o) {\r\n        if (o.id === action.payload) return _.set(o, \"completed\", !o.completed);\r\n      });\r\n      return [...newState];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\n//import reducers\r\nimport todo from \"./todo\";\r\nimport visibilityFilter from \"./visibilityFilter\";\r\n\r\nexport default combineReducers({todo,visibilityFilter})","import _ from \"lodash\";\r\n\r\nexport default function(state=\"ALL\", action){\r\n    switch(action.type){\r\n        case \"SET_VISIBILITY_FILTER\": \r\n\r\n        return action.payload;\r\n        default:\r\n        return state\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport App from \"./components/App\";\nimport reducers from \"./reducers\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}