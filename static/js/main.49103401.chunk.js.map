{"version":3,"sources":["components/AddToDo.js","actions/index.js","components/ToDoList.js","components/Filter.js","components/App.js","reducers/todo.js","reducers/index.js","reducers/visibilityFilter.js","serviceWorker.js","index.js"],"names":["AddToDo","props","submitForm","e","preventDefault","state","value","error","addToDo","setState","onSubmit","className","type","placeholder","this","onChange","target","class","React","Component","connect","taskName","payload","ToDoList","getList","todoList","todo","visibilityFilter","filter","item","completed","length","map","listItem","index","key","id","onClick","toggleToDo","Filter","setVisibilityFilter","visibilityFlag","App","initialState","combineReducers","action","Math","random","newState","_","forEach","o","set","Boolean","window","location","hostname","match","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49103401.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {connect } from \"react-redux\";\r\n\r\n//import action\r\nimport {addToDo} from \"../actions\"\r\n\r\nclass AddToDo extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value:\"\",\r\n            error: \"\"\r\n        }\r\n    }\r\n\r\n\r\n    submitForm = (e) => {\r\n        e.preventDefault();\r\n        const {value, error} = this.state;\r\n\r\n        if(value !== \"\"){\r\n             //run action function\r\n        this.props.addToDo(value);\r\n\r\n        //now make the value empty\r\n        this.setState({\r\n            value: \"\",\r\n            error: \"\"\r\n        })\r\n        }else{\r\n            this.setState({\r\n                error: \"Please type something!\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <form onSubmit={(e) => this.submitForm(e)}>\r\n              \r\n                \r\n                <div className=\"ui fluid action input\">\r\n                <input type=\"text\" placeholder=\"Add Todo\" value={this.state.value} onChange= {e => this.setState({\r\n                    value: e.target.value\r\n                })}/>\r\n                <button class=\"ui button\" type=\"submit\">Submit</button>\r\n                </div>\r\n                {this.state.error !== \"\" ? <div>{this.state.error}</div>: null}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(null,{addToDo})(AddToDo);","\r\n\r\n//ADD TO DO ACTION\r\nexport const addToDo = (taskName) => {\r\n    return {\r\n        type: \"ADD_TODO\",\r\n        payload: taskName\r\n    }\r\n}\r\n\r\n//toggle todo\r\nexport const toggleToDo = (id) => {\r\n    return {\r\n        type: \"TOGGLE_TODO\",\r\n        payload: id\r\n    }\r\n}\r\n\r\n//visibility filter \r\nexport const setVisibilityFilter = (visibilityFlag) => {\r\n    return {\r\n        type: \"SET_VISIBILITY_FILTER\",\r\n        payload: visibilityFlag\r\n    }\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {toggleToDo} from \"../actions\"\r\n\r\nclass ToDoList extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    \r\n    getList = () => {\r\n        const {todo,visibilityFilter} = this.props;\r\n\r\n        let todoList ;\r\n        //Now based on the filter we need to make the todolist\r\n        switch(visibilityFilter){\r\n            case \"ALL\": \r\n                todoList = todo;\r\n                break;\r\n\r\n                case true:\r\n                    todoList = todo.filter(item => item.completed === true);\r\n                    break;\r\n\r\n                case false:\r\n                        todoList = todo.filter(item => item.completed === false);\r\n                    break;\r\n        }\r\n\r\n        return <ul>\r\n        {\r\n            todoList.length ? todoList.map((listItem, index) => \r\n                <li \r\n                    className={`cursor-pointer ui  ${listItem.completed ? 'strike': null}`}   \r\n                    key={listItem.id}\r\n                    onClick = {(e) => this.props.toggleToDo(listItem.id)}\r\n                    >{listItem.taskName}</li>\r\n                   \r\n                ): \r\n                \r\n                \"No Tasks present\"\r\n        }\r\n    </ul>\r\n    }\r\n\r\n    render(){\r\n        return this.getList();\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const {todo, visibilityFilter} = state\r\n\r\n    return {todo, visibilityFilter};\r\n}\r\n\r\nexport default connect(mapStateToProps,{toggleToDo})(ToDoList);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {setVisibilityFilter} from \"../actions\";\r\n\r\nclass Filter extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            visibilityFilter: \"ALL\"\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        const { visibilityFilter} = this.props;\r\n        return (\r\n            <div>\r\n                <label>\r\n                Filter :\r\n                </label>\r\n                <div className=\"filtersBar\">\r\n                <p className={visibilityFilter === \"ALL\" ? 'active': null} onClick={() => this.props.setVisibilityFilter(\"ALL\")} >\r\n                    All\r\n                </p>\r\n                <p className={visibilityFilter === true ? 'active': null} onClick={() => this.props.setVisibilityFilter(true)}>\r\n                    Completed\r\n                </p>\r\n                <p className={visibilityFilter === false ? 'active': null} onClick={() => this.props.setVisibilityFilter(false)}>\r\n                    InCompleted\r\n                </p>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({visibilityFilter}) => {\r\n    return {visibilityFilter};\r\n}\r\n\r\nexport default connect(mapStateToProps, {setVisibilityFilter})(Filter);","import './styles/index.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport React from \"react\";\r\n\r\nimport AddToDo from \"./AddToDo\";\r\nimport ToDoList from \"./ToDoList\";\r\nimport Filter from \"./Filter\";\r\n\r\nclass App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <AddToDo />\r\n                <ToDoList />\r\n                <Filter />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import _ from \"lodash\";\r\n\r\nconst initialState = [];\r\n\r\n//function\r\nexport default function(state = initialState, action){\r\n    switch (action.type) {\r\n        case \"ADD_TODO\":\r\n\r\n            return [\r\n                ...state,{\r\n                    taskName: action.payload,\r\n                    id: Math.random(),\r\n                    completed: false\r\n                }\r\n            ]\r\n             \r\n\r\n        case \"TOGGLE_TODO\":\r\n            //GET \r\n            let newState = _.forEach(state, function(o) {\r\n                 if(o.id === action.payload) return _.set(o, 'completed', !o.completed)\r\n            });\r\n            return [...newState]\r\n        \r\n            \r\n        \r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\n\r\n//import reducers\r\nimport todo from \"./todo\";\r\nimport visibilityFilter from \"./visibilityFilter\";\r\n\r\nexport default combineReducers({todo,visibilityFilter})","import _ from \"lodash\";\r\n\r\nexport default function(state=\"ALL\", action){\r\n    switch(action.type){\r\n        case \"SET_VISIBILITY_FILTER\": \r\n\r\n        return action.payload;\r\n        default:\r\n        return state\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\"\n\nimport App from './components/App';\nimport reducers from \"./reducers\";\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers,applyMiddleware(thunk));\n\n\nReactDOM.render(<Provider store={store}>\n<App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}